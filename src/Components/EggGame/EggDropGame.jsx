import { useState, useEffect } from "react";
import { motion, AnimatePresence } from "framer-motion";

export const EggDropGame = ({
  score,
  setScore,
  finalScore,
  setFinalScore,
  startGame,
  restartGame,
  goToMenu,
  handleGameOver,
  isGameOver,
  isGameStarted,
  gameScores,
  userPlayed,
}) => {
  const [eggs, setEggs] = useState(2);
  const [attempts, setAttempts] = useState(0);
  const [criticalFloor, setCriticalFloor] = useState(null);
  const [currentFloor, setCurrentFloor] = useState();
  const [gameMessage, setGameMessage] = useState("");
  const [finalGuess, setFinalGuess] = useState("");
  const [showFinalGuess, setShowFinalGuess] = useState(false);

  
  useEffect(() => {
    if (isGameStarted && !isGameOver) {
      setCriticalFloor(Math.floor(Math.random() * 100) + 1);
      setEggs(2);
      setAttempts(0);
      setScore(500);
      setGameMessage("–ù–∞–∑–æ–≤–∏ —ç—Ç–∞–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ (1‚Äì100):");
      setShowFinalGuess(false);
      setCurrentFloor(50);
      setFinalGuess("");
    }
  }, [isGameStarted, isGameOver, setScore]);

  
  const calculateScore = (currentAttempts) => {
    if (currentAttempts > 14) {
      return Math.max(500 - (currentAttempts - 14) * 20, 0);
    }
    return 500;
  };

  
  const handleFloorSubmit = (e) => {
    e.preventDefault();
    const floor = parseInt(currentFloor);

    
    if (isNaN(floor) || floor < 1 || floor > 100) {
      setGameMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.");
      return;
    }

    const newAttempts = attempts + 1;
    setAttempts(newAttempts);

    
    if (floor >= criticalFloor) {
      const newEggs = eggs - 1;
      setEggs(newEggs);
      setGameMessage(
        `–Ø–π—Ü–æ —Ä–∞–∑–±–∏–ª–æ—Å—å! ü•öüí• –û—Å—Ç–∞–ª–æ—Å—å —è–∏—Ü: ${newEggs}. –ü–æ–ø—ã—Ç–∫–∞: ${newAttempts}.`
      );

      if (newEggs === 0) {
        setShowFinalGuess(true);
        setGameMessage("–û–±–∞ —è–π—Ü–∞ —Ä–∞–∑–±–∏—Ç—ã! –ù–∞–∑–æ–≤–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂:");
      }
    } else {
      setGameMessage(
        `–Ø–π—Ü–æ —Ü–µ–ª–æ! ü•ö –û—Å—Ç–∞–ª–æ—Å—å —è–∏—Ü: ${eggs}. –ü–æ–ø—ã—Ç–∫–∞: ${newAttempts}. –ù–∞–∑–æ–≤–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–∂:`
      );
    }

    
    const newScore = calculateScore(newAttempts);
    setScore(newScore);

    setCurrentFloor(floor);
  };

  
  const handleFinalGuess = (e) => {
    e.preventDefault();
    const guess = parseInt(finalGuess);

    if (isNaN(guess) || guess < 1 || guess > 100) {
      setGameMessage("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100.");
      return;
    }

    const isCorrect = guess === criticalFloor;
    const finalScore = isCorrect ? score : 0;

    setFinalScore(finalScore);
    handleGameOver(isCorrect, attempts);

    setGameMessage(
      isCorrect
        ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —É–≥–∞–¥–∞–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂ ${criticalFloor}! –û—á–∫–∏: ${finalScore}`
        : `–ù–µ–≤–µ—Ä–Ω–æ! –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂ –±—ã–ª ${criticalFloor}. –û—á–∫–∏: 0`
    );
  };

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen lunar-bg p-6"
    >
      <div className="card max-w-lg mx-auto">
        <h1 className="text-3xl font-bold mb-6 text-center text-indigo-200">
          –ù–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–∞—è –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        </h1>

        {}
        {!isGameOver && (
          <div className="mb-6 text-sm text-gray-300">
            <h2 className="font-semibold text-lg text-indigo-300 mb-2">–ü—Ä–∞–≤–∏–ª–∞:</h2>
            <ul className="list-disc list-inside space-y-1">
              <li>–ö–æ–º–ø—å—é—Ç–µ—Ä –∑–∞–≥–∞–¥–∞–ª –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂ N (1‚Äì100).</li>
              <li>–£ —Ç–µ–±—è –µ—Å—Ç—å 2 —è–π—Ü–∞ ü•ö.</li>
              <li>–Ø–π—Ü–æ —Ä–∞–∑–±–∏–≤–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –±—Ä–æ—Å–∏—Ç—å —Å —ç—Ç–∞–∂–∞ ‚â• N.</li>
              <li>–Ø–π—Ü–æ –æ—Å—Ç–∞–µ—Ç—Å—è —Ü–µ–ª—ã–º, –µ—Å–ª–∏ –±—Ä–æ—Å–∏—Ç—å —Å —ç—Ç–∞–∂–∞ –º–µ–Ω—å—à–µ N.</li>
              <li>–¶–µ–ª—å: –Ω–∞–π—Ç–∏ N –∑–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫.</li>
              <li>–û—á–∫–∏: 500 –º–∞–∫—Å–∏–º—É–º, -20 –∑–∞ –∫–∞–∂–¥—É—é –ø–æ–ø—ã—Ç–∫—É —Å–≤—ã—à–µ 14. 0 –æ—á–∫–æ–≤, –µ—Å–ª–∏ –Ω–µ —É–≥–∞–¥–∞–µ—à—å.</li>
            </ul>
          </div>
        )}
        {!isGameOver && (
          <div className="mb-6 text-center">
          <motion.button
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.95 }}
            className="btn-primary btn-red"
            onClick={()=>{
              handleGameOver(false, score);
            }}
            aria-label="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É"
          >
            –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </motion.button>
          </div>
        )}
        

        {}
        {!isGameOver && !showFinalGuess && (
          <div className="mb-6 text-center">
            <p className="text-lg text-gray-300">
              –Ø–∏—Ü –æ—Å—Ç–∞–ª–æ—Å—å: <span className="font-semibold text-indigo-300">{eggs} ü•ö</span>
            </p>
            <p className="text-lg text-gray-300">
              –ü–æ–ø—ã—Ç–æ–∫: <span className="font-semibold text-indigo-300">{attempts}</span>
            </p>
            <p className="text-lg text-gray-300">
              –û—á–∫–∏: <span className="font-semibold text-yellow-400">{score}</span>
            </p>
          </div>
        )}

        {}
        <p
          className={`mb-6 text-lg ${
            gameMessage.includes("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º")
              ? "text-green-400"
              : gameMessage.includes("–ù–µ–≤–µ—Ä–Ω–æ") || gameMessage.includes("—Ä–∞–∑–±–∏–ª–æ—Å—å")
              ? "text-red-400"
              : "text-gray-300"
          }`}
        >
          {gameMessage}
        </p>

        {}
        {!isGameOver && !showFinalGuess && (
          <motion.form
            onSubmit={handleFloorSubmit}
            className="mb-6 flex justify-center gap-3"
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <input
              type="number"
              value={currentFloor}
              onChange={(e) => setCurrentFloor(e.target.value)}
              placeholder="–≠—Ç–∞–∂ (1‚Äì100)"
              className="px-4 py-2 bg-gray-700 bg-opacity-50 text-white border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              min="1"
              max="100"
              aria-label="–í–≤–µ—Å—Ç–∏ —ç—Ç–∞–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
            />
            <motion.button
              type="submit"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="btn-primary btn-blue"
              aria-label="–ë—Ä–æ—Å–∏—Ç—å —è–π—Ü–æ"
            >
              –ë—Ä–æ—Å–∏—Ç—å
            </motion.button>
          </motion.form>
        )}

        {}
        {!isGameOver && showFinalGuess && (
          <motion.form
            onSubmit={handleFinalGuess}
            className="mb-6 flex justify-center gap-3"
            initial={{ y: 20, opacity: 0 }}
            animate={{ y: 0, opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <input
              type="number"
              value={finalGuess}
              onChange={(e) => setFinalGuess(e.target.value)}
              placeholder="–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂"
              className="px-4 py-2 bg-gray-700 bg-opacity-50 text-white border border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              min="1"
              max="100"
              aria-label="–í–≤–µ—Å—Ç–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂"
            />
            <motion.button
              type="submit"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              className="btn-primary btn-blue"
              aria-label="–£–≥–∞–¥–∞—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —ç—Ç–∞–∂"
            >
              –£–≥–∞–¥–∞—Ç—å
            </motion.button>
          </motion.form>
        )}

        {}
        {isGameOver && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ duration: 0.5 }}
            className="card"
          >
            <h2 className="text-2xl font-bold mb-4 text-indigo-200">
              –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!
            </h2>
            <p className="text-lg text-gray-300 mb-2">
              –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—á—ë—Ç: <span className="font-semibold text-yellow-400">{finalScore}</span>
            </p>
            {gameScores?.eggs?.max > 0 && (
              <p className="text-lg text-gray-300 mb-2">
                –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <span className="font-semibold text-yellow-400">{gameScores.eggs.max}</span>
              </p>
            )}
            <p className="text-lg text-gray-300 mb-4">
              –°—ã–≥—Ä–∞–Ω–æ: <span className="font-semibold text-indigo-300">{userPlayed[1] || 0}/3</span>
            </p>
            <div className="flex justify-center gap-3">
              {userPlayed[1] < 3 && (
                <motion.button
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.95 }}
                  className="btn-primary btn-green"
                  onClick={restartGame}
                  aria-label="–ü–µ—Ä–µ–∏–≥—Ä–∞—Ç—å"
                >
                  –ü–µ—Ä–µ–∏–≥—Ä–∞—Ç—å
                </motion.button>
              )}
              <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.95 }}
                className="btn-primary btn-gray"
                onClick={goToMenu}
                aria-label="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
              >
                –í –º–µ–Ω—é
              </motion.button>
            </div>
          </motion.div>
        )}
      </div>
    </motion.div>
  );
};